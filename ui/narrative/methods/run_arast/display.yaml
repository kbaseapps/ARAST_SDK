#
# define display information
#
name: Assemble with ARAST
tooltip: |
    Assemble DNA reads into a set of contigs (an Assembly object) using the ARAST Assembly Service.
screenshots: []

icon: arast-blue.png

#
# define a set of similar methods that might be useful to the user
#
suggestions:
    apps:
        related:
            []
        next:
            []
    methods:
        related:
            []
        next:
            []

#
# Configure the display and description of parameters
#
parameters :
    read_library_names :
        ui-name : Read library/libraries
        short-hint : List of read libraries
    output_contigset_name:
        ui-name : Output Assembly object name
        short-hint : Enter a name for the Assembly (assembled contigs) data object
    recipe :
        ui-name : |
            Assembly Recipe
        short-hint : |
            This app can assemble contigs using several "recipes" or curated workflows that can provide intelligent pipelines, automatic parameter selection, or multi-assembler comparisons (see manual page for more information)
        long-hint  : |
            This app can assemble contigs using several "recipes" or curated workflows that can provide intelligent pipelines, automatic parameter selection, or multi-assembler comparisons (see manual page for more information)
    assembler :
        ui-name : |
            Assembler Mode
        short-hint : |
            One of these assemblers can be chosen as the preferred tool for assembly.
        long-hint  : |
            One of these assemblers can be chosen as the preferred tool for assembly.
    pipeline :
        ui-name : |
            Assembly Pipeline
        short-hint : |
            Allows the user to rapidly build a customized pipeline combination using the set of available preprocessing, assembly, and postprocessing tools
        long-hint  : |
            Allows the user to rapidly build a customized pipeline combination using the set of available preprocessing, assembly, and postprocessing tools (see the technical description in the manual page for more information); a pipeline is specified via a space-separated string, e.g., bhammer velvet
    min_contig_len:
        ui-name : Minimal contig length
        short-hint : Minimum length of contigs to output, default 300

description : |

    <p><h2><b>This is App is now inactive according to the KBase <a href=”https://kbase.github.io/kb_sdk_docs/references/dev_guidelines.html#what-prompts-an-app-to-be-deprecated”>Policy for App Deprecation</a> as it is no longer supported by the developer.</b></h2></p>
    <p>This app can be used to perform an automatic genome assembly using the latest computational tools. Single or multiple assemblers can be invoked to compare results. Resulting assemblies are automatically processed via a collection of analysis tools developed by both KBase and the research community. The app attempts to select the best assembly (the smallest number of contigs, the longest average contig length) to suggest to the user.</p>
    <p>Several assembly workflows or "recipes" are available. These workflows have been tuned and tested to fit certain dataset types or desired analysis criteria such as throughput or rigor. The compute engine's flexible nature also enables the rapid design and emulation of other popular protocols.</p>
    <p>Additionally, custom workflows can be designed and executed in "pipeline" mode without having to compose complicated scripts. Workflows can be composed with combinations of quality filtering or trimming, error correction, adapter removal, assembly, scaffolding, or post-processing.</p>

    <p>Assembly Recipe Descriptions:</p>
    <p>Automatic Assembly:
        <ul>
        <li>Provides a nice balance between "fast pipeline" and "smart pipeline"</li>
        <li>Runs BayesHammer on reads</li>
        <li>Assembles with Velvet[25], IDBA[20] and SPAdes[2]</li>
        <li>Sorts assemblies by ALE score[7]</li></ul></p>
    <p>Fast Pipeline:
        <ul>
        <li>Assembles with A6[1], Velvet[25] and SPAdes[2] (with BayesHammer for error correction)</li>
        <li>Results are sorted by ARAST quality score</li></ul></p>
    <p>Smart Pipeline:
        <ul>
        <li>Runs BayesHammer[19] on reads, KmerGenie[5] to choose hash-length for Velvet[25]</li>
        <li>Assembles with Velvet[25], IDBA[20] and SPAdes[2]</li>
        <li>Sorts assemblies by ALE score[7]</li>
        <li>Merges the two best assemblies with GAM-NGS[24]</li></ul></p>
    <p>Kiki assembler[15]:
        <ul>
        <li>Runs Kiki assembler</li></ul></p>
    </p>
    <p>Assembly Recipe Descriptions:
        <ul><li>sspace: SSPACE pre-assembled contig scaffolder[3]</br>
            default values:</br>
            extend: False</br>
            minimum_overlap: 15</br>
            a: 0.4</br>
            m: -1</br>
            n: -1</br>
            k: -1</br>
            x: 0</li>
        <li>trim_sort: DynamicTrim and LengthSort from SolexaQA[8]</br>
            default values:</br>
            probcutoff: 0.05</br>
            length: 25</li>

        <li>filter_by_length: Length-based sequencing reads filter and trimmer based on seqtk[11]</br>
            default values:</br>
            min: 250</br>
            end: 200</br>
            sync: True</li>
        <li>KmerGenie: Informed and automated k-mer size selection for genome assembly[5]</ul>
        <li>bwa: BWA aligner that maps reads to contigs[18]</li>
        <li>velvet: Velvet de-bruijn graph based assembler[25]</br>
            default values:</br>
            hash_length: 29</br>
            auto_insert: False</li>
        <li>masurca: MaSuRCA assembler based on a hybrid graph & overlap based algorithms[26]</br>
            default values:</br>
            graph_k-mer_size: auto</br>
            use_linking_mates: auto</br>
            limit_jump_coverage: 60</br>
            ca_parameters: ovlMerSize=30 cgwErrorRate=0.25 ovlMemory=4GB</br>
            k-mer_count_threshold: 1/br>
            num_threads: auto</br>
            jf_size: 2000000000</br>
            do_homopolymer_trim: 0</li>
        <li>sga_preprocess: SGA component for preprocessing reads (runs subcommand 'preprocess')[21]</br>
            default values:</br>
            quality_trim: 10</br>
            quality_filter: 20</br>
            min_length: 29</br>
            permute_ambiguous: True</li>
        <li>bhammer: SPAdes component for quality control of sequence data[19]</li>
        <li>idba: IDBA iterative graph-based assembler for single-cell and standard data[20]</li>
            default values:</br>
            max_k: 50</br>
            scaffold: True</br></li>
        <li>prodigal: Prodigal microbial gene predictor[14]</li>
        <li>fastqc: FastQC quality control tool for sequence data[10]</li>
        <li>ray: Ray graph-based parallel microbial and metagenomic assembler[4]</br>
            default values:</br>
            k: 31</br></li>
        <li>swap: SWAP Assembler[22]</li>
        <li>gam_ngs: GAM-NGS genomic assemblies merger[24]</li>
        <li>ale: ALE likelihood-based estimator of assembly quality[7]</li>
        <li>kiki: Kiki overlap-based parallel microbial and metagenomic assembler[15]</br>
            default values:</br>
            k: 27</br>
            contig_threshold: 800</br></li>
        <li>a5: A5 microbial assembly pipeline[23]</li>
        <li>tagdust: TagDust sequencing artifacts remover[17]</li>
        <li>sga_ec: SGA component for error correction (runs subcommands: 'index' & 'correct')[18]</li>
        <li>pacbio: PacBio non-hybrid assembly pipeline for SMRT long reads [6]</li>
        <li>reapr: REAPR assembly error recognizer using paired-end reads[13]</li>
        <li>a6: Modified A5 microbial assembly pipeline[1]</li>
        <li>quast: QUAST assembly quality assessment tool (run by default)[12]</li>
        <li>bowtie2: Bowtie2 aligner that maps reads to contigs[16]</li>
        <li>discovar: Discovar assembly pipeline for illumina 250+ bp reads[9]</li></ul>

    </p>

    <p><strong>Team members who developed & deployed algorithm in KBase:</strong>
    Chris Bun, Fangfang Xia. For questions, <a href="http://kbase.us/contact-us/">contact us</a>.</p>

publications :
    -
        display-text: |
            [1] A6 Github source:
        link: https://github.com/levinas/a5

    -
        display-text: |
            [2] Bankevich A, Nurk S, Antipov D, Gurevich AA, Dvorkin M, Kulikov AS, et al. SPAdes: a new genome assembly algorithm and its applications to single-cell sequencing. J Comput Biol. 2012;19: 455–477. doi:10.1089/cmb.2012.0021
        link: https://www.liebertpub.com/doi/10.1089/cmb.2012.0021

    -
        display-text: |
            [3] Boetzer M, Henkel CV, Jansen HJ, Butler D, Pirovano W. Scaffolding pre-assembled contigs using SSPACE. Bioinformatics. 2011;27: 578–579. doi:10.1093/bioinformatics/btq683
        link: https://academic.oup.com/bioinformatics/article/27/4/578/197626

    -
        display-text: |
            [4] Boisvert S, Raymond F, Godzaridis É, Laviolette F, Corbeil J. Ray Meta: scalable de novo metagenome assembly and profiling. Genome Biology. 2012;13: R122. doi:10.1186/gb-2012-13-12-r122
        link: https://genomebiology.biomedcentral.com/articles/10.1186/gb-2012-13-12-r122

    -
        display-text: |
            [5] Chikhi R, Medvedev P. Informed and automated k-mer size selection for genome assembly. Bioinformatics. 2014;30: 31–37. doi:10.1093/bioinformatics/btt310
        link: https://academic.oup.com/bioinformatics/article/30/1/31/235479

    -
        display-text: |
            [6] Chin C-S, Alexander DH, Marks P, Klammer AA, Drake J, Heiner C, et al. Nonhybrid, finished microbial genome assemblies from long-read SMRT sequencing data. Nature Methods. 2013;10: 563–569. doi:10.1038/nmeth.2474
        link: https://www.nature.com/articles/nmeth.2474

    -
        display-text: |
            [7] Clark SC, Egan R, Frazier PI, Wang Z. ALE: a generic assembly likelihood evaluation framework for assessing the accuracy of genome and metagenome assemblies. Bioinformatics. 2013;29: 435–443. doi:10.1093/bioinformatics/bts723
        link: https://academic.oup.com/bioinformatics/article/29/4/435/199222

    -
        display-text: |
            [8] Cox MP, Peterson DA, Biggs PJ. SolexaQA: At-a-glance quality assessment of Illumina second-generation sequencing data. BMC Bioinformatics. 2010;11: 485. doi:10.1186/1471-2105-11-485
        link: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-11-485

    -
        display-text: |
            [9] Discovar source:
        link: https://software.broadinstitute.org/software/discovar/blog/

    -
        display-text: |
            [10] FastQC source:
        link: http://www.bioinformatics.babraham.ac.uk/projects/fastqc/

    -
        display-text: |
            [11] Filter by Length GitHub source:
        link: https://github.com/levinas/seqtk

    -
        display-text: |
            [12] Gurevich A, Saveliev V, Vyahhi N, Tesler G. QUAST: quality assessment tool for genome assemblies. Bioinformatics. 2013;29: 1072–1075. doi:10.1093/bioinformatics/btt086
        link: https://academic.oup.com/bioinformatics/article/29/8/1072/228832

    -
        display-text: |
            [13] Hunt M, Kikuchi T, Sanders M, Newbold C, Berriman M, Otto TD. REAPR: a universal tool for genome assembly evaluation. Genome Biology. 2013;14: R47. doi:10.1186/gb-2013-14-5-r47
        link: https://genomebiology.biomedcentral.com/articles/10.1186/gb-2013-14-5-r47

    -
        display-text: |
            [14] Hyatt D, Chen G-L, LoCascio PF, Land ML, Larimer FW, Hauser LJ. Prodigal: prokaryotic gene recognition and translation initiation site identification. BMC Bioinformatics. 2010;11: 119. doi:10.1186/1471-2105-11-119
        link: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-11-119

    -
        display-text: |
            [15] Kiki GitHub source:
        link: https://github.com/GeneAssembly/kiki

    -
        display-text: |
            [16] Langmead B, Salzberg SL. Fast gapped-read alignment with Bowtie 2. Nat Methods. 2012;9: 357–359. doi:10.1038/nmeth.1923
        link: https://www.nature.com/articles/nmeth.1923

    -
        display-text: |
            [17] Lassmann T, Hayashizaki Y, Daub CO. TagDust—a program to eliminate artifacts from next generation sequencing data. Bioinformatics. 2009;25: 2839–2840. doi:10.1093/bioinformatics/btp527
        link: https://academic.oup.com/bioinformatics/article/25/21/2839/227883

    -
        display-text: |
            [18] Li H, Durbin R. Fast and accurate short read alignment with Burrows-Wheeler transform. Bioinformatics. 2009;25: 1754–1760. doi:10.1093/bioinformatics/btp324
        link: https://academic.oup.com/bioinformatics/article/25/14/1754/225615

    -
        display-text: |
            [19] Nikolenko SI, Korobeynikov AI, Alekseyev MA. BayesHammer: Bayesian clustering for error correction in single-cell sequencing. BMC Genomics. 2013;14: S7. doi:10.1186/1471-2164-14-S1-S7
        link: https://bmcgenomics.biomedcentral.com/articles/10.1186/1471-2164-14-S1-S7

    -
        display-text: |
            [20] Peng Y, Leung HCM, Yiu SM, Chin FYL. IDBA-UD: a de novo assembler for single-cell and metagenomic sequencing data with highly uneven depth. Bioinformatics. 2012;28: 1420–1428. doi:10.1093/bioinformatics/bts174
        link: https://academic.oup.com/bioinformatics/article/28/11/1420/266973

    -
        display-text: |
            [21] Simpson JT, Durbin R. Efficient de novo assembly of large genomes using compressed data structures. Genome Res. 2012;22: 549–556. doi:10.1101/gr.126953.111
        link: https://genome.cshlp.org/content/22/3/549.abstract

    -
        display-text: |
            [22] SWAP-Assembler source:
        link: https://sourceforge.net/projects/swapassembler/

    -
        display-text: |
            [23] Tritt A, Eisen JA, Facciotti MT, Darling AE. An Integrated Pipeline for de Novo Assembly of Microbial Genomes. PLOS ONE. 2012;7: e42304. doi:10.1371/journal.pone.0042304
        link: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0042304

    -
        display-text: |
            [24] Vicedomini R, Vezzi F, Scalabrin S, Arvestad L, Policriti A. GAM-NGS: genomic assemblies merger for next generation sequencing. BMC Bioinformatics. 2013;14: S6. doi:10.1186/1471-2105-14-S7-S6
        link: https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-14-S7-S6

    -
        display-text: |
            [25] Zerbino DR, Birney E. Velvet: algorithms for de novo short read assembly using de Bruijn graphs. Genome Res. 2008;18: 821–829. doi:10.1101/gr.074492.107
        link: https://genome.cshlp.org/content/18/5/821

    -
        display-text: |
            [26] Zimin AV, Marçais G, Puiu D, Roberts M, Salzberg SL, Yorke JA. The MaSuRCA genome assembler. Bioinformatics. 2013;29: 2669–2677. doi:10.1093/bioinformatics/btt476
        link: https://academic.oup.com/bioinformatics/article/29/21/2669/195975
